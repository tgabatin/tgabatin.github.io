---
layout: essay
type: essay
title: A Reflection on Software Engineering
# All dates must be YYYY-MM-DD format!
date: 2021-05-11
labels:
  - Software Engineering
  - Learning
---

## A Reflection Of Software Engineering

As a senior moving forward in the final stages of my undergraduate career, I am beginning to explore new fields and career paths within the realm of computer science
that may seem feasible for me. Upon registering for the Software Engineering class, I took it upon myself to learn new methods in this field, and apply what I have learned
to my future job opportunities. Most of the structure of software engineering itself is in the realm of what it means to be self-taught, so the class itself seemed to be
this way - with many of the software and concepts that we learn in this class structured around the work life of a software cycle. 

One of the hardest things that I needed to personally learn in this class was working with a larger structure of software engineers. Being able to communicate our ideas
thoroughly, and understand what the other person is saying through their code was one of the most important takeaways I got. It is not good enough to write amazing code. 
Other people need to be able to understand what is going on in the code in order to contribute to the project, and constantly have meetings and communicate their
ideas in order to create a solution. This taught me that although it is possible to create code entirely on our own, it is the collaborative effort of a group that allows 
these contributions to come to fruition. 

Software Engineering also comes with the ability to learn and create constantly. Throughout the realm of our software engineering cycle, one of the most positive things we did learn
were the amounts of resources available in order to create a project. Being able to add these resources to our product was somewhat of a learning curve - we needed to be able to test
and produce different aspects of software in order to see what would be the best fit for the projects that we would push forward. This included researching different ideas that would 
look like they could potentially fit for the project, and being able to see what types of packages could be included. Although we didn't know how to work most of these at first,
we were able to research and find new methods of being able to push our software forward to create a new product at each stage of development. 

One of the most influential things I've learned in this class was how to use GitHub effectively to collaborate with team members, and get a good control and grap on terminal commands
to ensure that none of the branches that we all worked on together would potentially get destroyed or changed. Being able to see how much work is actually put into a project on the coding
side of things allowed me to discover that Software Engineering is an ongoing process. Another thing that I learned was that outside of what you see in the code, most of sotware engineering
also involves careful planning and dedication. This means that before any code is committed, to ensure that the project has a certain "look" or feel, the first thing that you need to do
is be able to plan out the project. This means talking with team mates and making sure that we all have the same concept of what the product delivery should look like. 

Overall, my experience in the Software Engineering class was a positive one. One of the most important things I wish could be incorporated was the software engineering cycle, such 
as software quality assurance. This would allow us to test our code and ensure it fits the standards of what is expected to be pushed forward. Although this semester has now come to
a close, I will take what I have learned in software engineering, and apply these principles to my future classes and potential employers. 
